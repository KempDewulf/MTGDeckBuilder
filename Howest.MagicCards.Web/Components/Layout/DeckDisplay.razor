@page "/deckdisplay"
@using System.Net
@using System.Text
@using System.Text.Json
@using Howest.MagicCards.Shared.DTO
@using Microsoft.AspNetCore.WebUtilities
@inject IHttpClientFactory HttpClientFactory
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

<style>
    .quantity-span {
        display: inline-block;
        width: 20px; /* Adjust this value as needed */
        text-align: center;
    }
</style>

<div class="flex-grow-1">
    <div class="d-flex justify-content-between w-100 deck-header">
        <h2>Your Deck:</h2>
        <div>
            <span>Cards: @(_deck?.Cards.Sum(c => c.Quantity) ?? 0) / 60</span>
            <button class="btn btn-warning ms-2 me-4" @onclick="ClearDeck">Clear deck</button>
        </div>
    </div>
    <div class="deck ">
        <ul>
            @if (_deck != null)
            {
                foreach (var card in _deck.Cards)
                {
                    <li class="d-flex">
                        <div>
                            <button class="btn btn-secondary btn-sm" @onclick="() => RemoveCardFromDeck(card.CardId)">-</button>
                            <span class="quantity-span">@card.Quantity</span>
                            <button class="btn btn-secondary btn-sm" @onclick="() => AddCardToDeck(card.CardId)" disabled="@(_deck?.Cards.Sum(c => c.Quantity) >= 60)">+</button>
                        </div>
                        <div class="ms-2">
                            <p class="text">@_cardsInDeck[card.CardId].Name</p>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>
</div>

@code {
    
    [Inject]
    public ProtectedLocalStorage LocalStorage { get; set; }
    
    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true
    };
    
    private DeckReadDto _deck;
    private Dictionary<long, CardReadDto> _cardsInDeck = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var result = await LocalStorage.GetAsync<string>("deckId");
        if (!result.Success)
        {
            _deck = await CreateDeckAsync();
            await LocalStorage.SetAsync("deckId", _deck.Id);
            StateHasChanged();
            return;
        }

        _deck = await GetDeckAsync(result.Value);
        StateHasChanged();
    }

    public async Task AddCard(long cardId)
    {
        if (_deck != null)
        {
            int totalCardsInDeck = _deck.Cards.Sum(c => c.Quantity);
            if (totalCardsInDeck >= 60)
            {
                return;
            }

            await AddCardToDeck(cardId);
        }
        StateHasChanged();
    }
    
    private async Task<CardReadDto> GetCardAsync(long cardId)
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("CardsAPI");
        HttpResponseMessage response = await httpClient.GetAsync($"cards/{cardId}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        return response.IsSuccessStatusCode ? JsonSerializer.Deserialize<CardReadDto>(apiResponse, _jsonOptions) : null;
    }

    private async Task<DeckReadDto> CreateDeckAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("DecksAPI");
        HttpResponseMessage response = await httpClient.PostAsJsonAsync("decks", new { });
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadFromJsonAsync<DeckReadDto>();
    }

    private async Task<DeckReadDto> GetDeckAsync(string id)
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("DecksAPI");
        HttpResponseMessage response = await httpClient.GetAsync($"decks/{id}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            _deck = JsonSerializer.Deserialize<DeckReadDto>(apiResponse, _jsonOptions);
            _cardsInDeck.Clear();
            foreach (var card in _deck.Cards)
            {
                var cardInfo = await GetCardAsync(card.CardId);
                _cardsInDeck[card.CardId] = cardInfo;
            }
        }
        else
        {
            _deck = null;
        }

        return _deck;
    }

    private async Task AddCardToDeck(long cardId)
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("DecksAPI");
        try
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync($"decks/{_deck.Id}/cards", new { cardId = cardId });
            response.EnsureSuccessStatusCode();
            _deck = await GetDeckAsync(_deck.Id);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.BadRequest)
        {
            Console.WriteLine("Cannot add more cards. The deck is full.");
        }
    }

    private async Task RemoveCardFromDeck(long cardId)
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("DecksAPI");
        var request = new HttpRequestMessage(HttpMethod.Delete, $"decks/{_deck.Id}/cards")
        {
            Content = new StringContent(JsonSerializer.Serialize(new { cardId = cardId }), Encoding.UTF8, "application/json")
        };
        HttpResponseMessage response = await httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();
        _deck = await GetDeckAsync(_deck.Id);
    }

    private async Task ClearDeck()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("DecksAPI");
        HttpResponseMessage response = await httpClient.DeleteAsync($"decks/{_deck.Id}");
        response.EnsureSuccessStatusCode();
        _deck = await GetDeckAsync(_deck.Id);
    }
}