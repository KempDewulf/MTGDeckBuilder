@page "/"
@using System.Text.Json
@using Howest.MagicCards.Shared.DTO
@using Howest.MagicCards.Shared.Filters
@using Howest.MagicCards.WebAPI.Utilities
@using Microsoft.AspNetCore.WebUtilities
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Deck Builder</PageTitle>

<div class="form-container">
    <form>
        <div class="form-row">
            <div class="form-group">
                <label for="cardName">Card Name</label>
                <input type="text" id="cardName" class="form-control" @bind="CardName"/>
            </div>
            <div class="form-group">
                <label for="cardText">Card Text</label>
                <input type="text" id="cardText" class="form-control" @bind="CardText"/>
            </div>
            <div class="form-group">
                <label for="artist">Artist</label>
                <input type="text" id="artist" class="form-control" @bind="Artist"/>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group">
                <label for="cardType">Card Type</label>
                <select id="cardType" class="form-control" @bind="CardType">
                    <option value="">Select Card Type</option>
                    @foreach (var type in _types)
                    {
                        <option value="@type.Name">@type.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="rarity">Rarity</label>
                <select id="rarity" class="form-control" @bind="Rarity">
                    <option value="">Select Rarity</option>
                    @foreach (var rarity in _rarities)
                    {
                        <option value="@rarity.Name">@rarity.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="set">Set</label>
                <select id="set" class="form-control" @bind="Set">
                    <option value="">Select Set</option>
                    @foreach (var set in _sets)
                    {
                        <option value="@set.Name">@set.Name</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary custom-button" type="button" @onclick="PerformSearch">Search</button>
        </div>
    </form>
    <div class="card-grid">
        @foreach (var card in _cards)
        {
            <div class="card">
                <img src="@(string.IsNullOrEmpty(card.ImageUrl) ? $"https://images.placeholders.dev/?width=230&height=318&text={Uri.EscapeDataString(card.Name)}&fontSize=30&textWrap=true&bgColor=%23f7f6f6&textColor=%236d6e71" : card.ImageUrl)" alt="@card.Name" />
            </div>
        }
    </div>
    <div class="pagination-controls d-flex justify-content-center align-items-center pt-4 pb-4">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span class="ps-2 pe-2">Page @_currentPage of @_totalPages</span>
        <button class="btn btn-primary" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>
</div>

@code {
    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true
    };
    private IEnumerable<CardReadDto> _cards = [];
    private IEnumerable<TypeDto> _types = [];
    private IEnumerable<RarityDto> _rarities = [];
    private IEnumerable<SetDto> _sets = [];
    private int _currentPage = 1;
    private int _totalPages;
    
    private string CardName { get; set; }
    private string CardText { get; set; }
    private string Artist { get; set; }
    private string CardType { get; set; }
    private string Rarity { get; set; }
    private string Set { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchCards();
        await FetchCardTypes();
        await FetchRarities();
        await FetchSets();
    }
    
    private async Task PerformSearch()
    {
        _cards = new List<CardReadDto>();
        await FetchCards(CardName, CardText, Artist, CardType, Rarity, Set, _currentPage);
    }
    
    private async Task PreviousPage()
    {
        if (_currentPage <= 1) return;
        _currentPage--;
        await PerformSearch();
    }

    private async Task NextPage()
    {
        if (_currentPage >= _totalPages) return;
        _currentPage++;
        await PerformSearch();
    }
    
    private async Task FetchCards(string cardName = "", string cardText = "", string artistName = "", string cardType = "", string rarityName = "", string setName = "", int pageNumber = 1)
    {
        CardFilter filter = new CardFilter
        {
            CardName = cardName,
            CardText = cardText,
            ArtistName = artistName,
            CardType = cardType,
            RarityName = rarityName,
            SetName = setName,
            PageNumber = pageNumber,
        };

        var filterParams = new Dictionary<string, string>
        {
            { "CardName", filter.CardName },
            { "CardText", filter.CardText },
            { "ArtistName", filter.ArtistName },
            { "CardType", filter.CardType },
            { "RarityName", filter.RarityName },
            { "SetName", filter.SetName },
            { "PageNumber", filter.PageNumber.ToString() },
        };

        filterParams = filterParams.Where(param => !string.IsNullOrEmpty(param.Value)).ToDictionary(p => p.Key, p => p.Value);

        string queryString = QueryHelpers.AddQueryString("cards", filterParams);

        HttpClient httpClient = HttpClientFactory.CreateClient("CardsAPI");
        HttpResponseMessage response = await httpClient.GetAsync(queryString);

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            PagedResponse<IEnumerable<CardReadDto>> result =
                JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardReadDto>>>(apiResponse, _jsonOptions);
            _cards = result.Data;
            _totalPages = result.TotalPages;
        }
        else
        {
            _cards = new List<CardReadDto>();
        }
    }
    
    private async Task FetchCardTypes()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("CardsAPI");
        HttpResponseMessage response = await httpClient.GetAsync("types");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<IEnumerable<TypeDto>> result = 
                JsonSerializer.Deserialize<Response<IEnumerable<TypeDto>>>(apiResponse, _jsonOptions);
            _types = result.Data;
        }
        else
        {
            _types = new List<TypeDto>();
        }
    }

    private async Task FetchRarities()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("CardsAPI");
        HttpResponseMessage response = await httpClient.GetAsync("rarities");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<IEnumerable<RarityDto>> result = 
                JsonSerializer.Deserialize<Response<IEnumerable<RarityDto>>>(apiResponse, _jsonOptions);
            _rarities = result.Data;
        }
        else
        {
            _rarities = new List<RarityDto>();
        }
    }
    
    private async Task FetchSets()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("CardsAPI");
        HttpResponseMessage response = await httpClient.GetAsync("sets");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<IEnumerable<SetDto>> result = 
                JsonSerializer.Deserialize<Response<IEnumerable<SetDto>>>(apiResponse, _jsonOptions);
            _sets = result.Data;
        }
        else
        {
            Console.WriteLine($"FetchCardTypes API call failed with status code {response.StatusCode} and response content {apiResponse}");

            _sets = new List<SetDto>();
        }
    }
}